<base:WindowBase x:Class="MyWpf.Home"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:Interaction="http://schemas.microsoft.com/expression/2010/interactions"
        xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
        xmlns:local="clr-namespace:MyWpf"
        xmlns:vm="clr-namespace:MyWpf.ViewModels"
        xmlns:conveter="clr-namespace:MyWpf.Converters"
        xmlns:base="clr-namespace:MyWpf.Common"         
        mc:Ignorable="d"
        Title="Home" Height="800" Width="1200"
        x:Name="home"
        MaxHeight="{Binding WinMaxHeight}" MaxWidth="{Binding WinMaxWidth}"
        >

    <WindowChrome.WindowChrome>
        <!--表示窗口周围透明边框的宽度-->
        <WindowChrome GlassFrameThickness="-1"></WindowChrome>
    </WindowChrome.WindowChrome>

    <Window.Resources>
        <conveter:MultiParamConverter x:Key="multi"></conveter:MultiParamConverter>
    </Window.Resources>

    <Window.DataContext>
        <vm:HomeViewModel></vm:HomeViewModel>
    </Window.DataContext>
    
    <!--开启定时器，显示当前时间-->
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
                <Interaction:CallMethodAction TargetObject="{Binding}" MethodName="WindowLoaded">
                </Interaction:CallMethodAction>
        </i:EventTrigger>
    </i:Interaction.Triggers>
    
    <!--<i:Interaction.Triggers>
        <i:EventTrigger EventName="MouseDown">
            --><!--<i:InvokeCommandAction Command="{Binding MoveCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"></i:InvokeCommandAction>-->
            <!--不使用命令，因为没法传递事件参数，无法获取是左键点击还是右键点击--><!--
            <Interaction:CallMethodAction TargetObject="{Binding }" MethodName="MoveWindow"></Interaction:CallMethodAction>
        </i:EventTrigger>
    </i:Interaction.Triggers>-->

    <Window.Effect>
        <DropShadowEffect BlurRadius="5" ></DropShadowEffect>
    </Window.Effect>

    <!--主窗体作为宿主-->
    <!--<materialDesign:DialogHost >-->

        <!--弹出的菜单栏放在左边的空白地方
        IsLeftDrawerOpen设置是否展开-->
        <!--
        <materialDesign:DrawerHost IsLeftDrawerOpen="False">
            <materialDesign:DrawerHost.LeftDrawerContent>
                <DockPanel MinWidth="180">
                    <ToggleButton Margin="16,16,16,0" Style="{StaticResource MaterialDesignHamburgerToggleButton}" 
                                  DockPanel.Dock="Top" HorizontalAlignment="Right" VerticalAlignment="Top" >
                    </ToggleButton>
                    <ListBox x:Name="listMenu">
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <TextBlock FontSize="15" Margin="16,0,0,0" Text="{Binding Path=menuName}"></TextBlock>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>
                </DockPanel>
            </materialDesign:DrawerHost.LeftDrawerContent>
        </materialDesign:DrawerHost>-->

        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="70"></ColumnDefinition>
                <ColumnDefinition></ColumnDefinition>
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
                <RowDefinition Height="80"></RowDefinition>
                <RowDefinition></RowDefinition>
                <RowDefinition Height="30"></RowDefinition>
            </Grid.RowDefinitions>

            
            <!--菜单栏部分-->
        <Border Background="{Binding Source={StaticResource theme}, Path=SkinColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"  Grid.Row="1" Grid.Column="0">
                <StackPanel   Orientation="Vertical"  >

                    <!--菜单栏部分-->
                    <ListBox x:Name="menuList" ItemsSource="{Binding Modules}"  >

                        <!--绑定事件对应的命令 不能这样用，Listbox会重复触发SelectionChanged事件,导致传递过去的参数不对-->
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="SelectionChanged">
                                <i:InvokeCommandAction Command="{Binding SelectChangedCommand}">
                                    <i:InvokeCommandAction.CommandParameter>
                                        <MultiBinding Converter="{StaticResource multi}">
                                            <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=Window}"></Binding>
                                            <Binding Path="SelectedIndex" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ListBox}"></Binding>
                                        </MultiBinding>
                                    </i:InvokeCommandAction.CommandParameter>
                                </i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>

                        <!--定义数据模板，是md里的图标-->
                        <ListBox.ItemTemplate>
                            <DataTemplate>
                                <Grid>
                                <Image Source="{Binding IconCode, Converter={StaticResource imaToStr}}" Height="60" Width="30" >
                                    </Image>
                                </Grid>
                            </DataTemplate>
                        </ListBox.ItemTemplate>

                        <!--定义子项的控件模板，让选中时就有提示，不是选中图标才有提示-->
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ListBoxItem">

                                            <!--使用grid，修改背景色，选中时就有提示-->
                                            <Grid Margin="0,20,0,0" x:Name="itemGrid" Background="{TemplateBinding Background}">
                                                <Grid.ToolTip>
                                                    <ToolTip Placement="Right">
                                                        <TextBlock Text="{Binding MenuName}"></TextBlock>
                                                    </ToolTip>
                                                </Grid.ToolTip>
                                                <ContentPresenter  HorizontalAlignment="Center" VerticalAlignment="Center"></ContentPresenter>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>

                                <!--选中修改背景色-->
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" Value="Gray"></Setter>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="False">
                                        <Setter Property="Background" Value="Transparent"></Setter>
                                    </Trigger>
                                </Style.Triggers>

                            </Style>
                        </ListBox.ItemContainerStyle>
                    </ListBox>
                </StackPanel>
            </Border>


            <!--工具栏部分-->
        <Border x:Name="tool" Background="{Binding Source={StaticResource theme}, Path=SkinColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.ColumnSpan="2"  Grid.Row="0" Grid.Column="0"  Padding="0,20,0,20" >
                <Grid x:Name="imaData">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="100"></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                        <ColumnDefinition></ColumnDefinition>
                    </Grid.ColumnDefinitions>
                    
                    <!--头像部分-->
                    <Image Margin="0,0,30,0"  HorizontalAlignment="Center" VerticalAlignment="Center" Cursor="Hand"  Source="{Binding Path=User.Icon,Converter={StaticResource imaToStr}}"  Height="40" Width="40" >
                        <Image.ToolTip>
                            <ToolTip Placement="Right" Content="{Binding Path=User.Name}">
                            </ToolTip>
                        </Image.ToolTip>
                        <Image.ContextMenu>
                            <ContextMenu  >
                                <MenuItem  Header="注销" >
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="Click">
                                            <i:InvokeCommandAction Command="{Binding LogOutCommand}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu,Mode=FindAncestor}, Path=PlacementTarget}"></i:InvokeCommandAction>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </MenuItem>
                            </ContextMenu>
                        </Image.ContextMenu>
                        <Image.Clip>
                            <EllipseGeometry RadiusX="20" RadiusY="20" Center="20,20"></EllipseGeometry>
                        </Image.Clip>
                        <i:Interaction.Triggers>
                            <i:EventTrigger EventName="MouseDown">
                                <i:InvokeCommandAction Command="{Binding EditLoginUserCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}"></i:InvokeCommandAction>
                            </i:EventTrigger>
                        </i:Interaction.Triggers>
                    </Image>
                    <!--<Button Content="11" Click="Button_Click"></Button>-->
                    <TextBlock  HorizontalAlignment="Left" Grid.Row="0" Grid.Column="1" Cursor="Hand" Text="Welcome !" VerticalAlignment="Center" FontSize="25" FontWeight="Bold" ></TextBlock>
                    
                    <StackPanel  Grid.Column="2" Orientation="Horizontal" HorizontalAlignment="Right" >
                        <!--MD默认的按钮样式就是鼠标移到那就是手状-->
                    <Button Command="{Binding MinCommand}" CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" Margin="0,0,20,0" BorderThickness="0"  Height="20" Width="20" VerticalAlignment="Top" >
                            <Button.ToolTip>
                                <ToolTip>
                                    最小化
                                </ToolTip>
                            </Button.ToolTip>
                            <!--<materialDesign:PackIcon Kind="WindowMinimize"  Height="20" Width="30"  >
                            </materialDesign:PackIcon>-->
                        <Button.Background>
                            <ImageBrush ImageSource="../Image/mini.png"></ImageBrush>
                        </Button.Background>
                    </Button>

                        <!---->
                    <Button  Margin="0,0,20,0" BorderThickness="0" Command="{Binding MaxNormalCommand}"  CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}"  Height="20" Width="20" VerticalAlignment="Top"  >
                            <!--Kind绑定，可以切换按钮形态 Kind="{Binding MaxNormalKind , Mode=TwoWay}"-->
                            <!--<materialDesign:PackIcon   Kind="{Binding MaxNormalKind , Mode=TwoWay}"  Height="20" Width="30">
                            </materialDesign:PackIcon>-->
                            <Button.ToolTip>
                                  <ToolTip>
                                    最大化
                                </ToolTip>
                            </Button.ToolTip>
                        <Button.Background>
                            <ImageBrush ImageSource="{Binding MaxNormalPicPath, Converter={StaticResource imaToStr}}"></ImageBrush>
                        </Button.Background>
                    </Button>

                    <Button x:Name="b" Command="{Binding CloseCommand}" Margin="-5,-4,5,0"   BorderThickness="0"  Height="30" Width="30" VerticalAlignment="Top"  >
                            <!--<materialDesign:PackIcon Kind="Close"   Height="20" Width="30">
                            </materialDesign:PackIcon>-->
                            <Button.ToolTip>
                                <ToolTip >
                                    关闭
                                </ToolTip>
                            </Button.ToolTip>
                        <Button.Background>
                            <ImageBrush ImageSource="../Image/close.png"></ImageBrush>
                        </Button.Background>
                        </Button>
                    </StackPanel>

                </Grid>
            </Border >

            <!--主要内容部分-->
            <ContentControl Margin="0,80,0,0" x:Name="mainContent" Grid.Row="1" Grid.Column="1" >
            </ContentControl>
            
            <!--状态栏部分-->
        <Border Background="{Binding Source={StaticResource theme}, Path=SkinColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Height="30"  Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2">
                <StatusBar VerticalAlignment="Center" >
                    <StatusBar.Template>
                        <ControlTemplate TargetType="StatusBar">
                            <StackPanel>
                                <ItemsPresenter HorizontalAlignment="Right" VerticalAlignment="Center"></ItemsPresenter>
                            </StackPanel>
                        </ControlTemplate>
                    </StatusBar.Template>
                    <TextBlock  Text="当前用户:"></TextBlock>
                    <TextBlock  Text="{Binding User.Name}"></TextBlock>
                    <TextBlock Margin="30,0,0,0"  Text="时间:"></TextBlock>
                    <TextBlock Margin="0,0,40,0" Text="{Binding CurrentTime}"></TextBlock>
                </StatusBar>
            </Border>
        </Grid>
    <!--</materialDesign:DialogHost>-->
</base:WindowBase>
